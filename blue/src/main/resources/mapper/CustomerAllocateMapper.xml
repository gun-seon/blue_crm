<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.blue.customer.allocate.mapper.CustomerAllocateMapper">

    <!-- 로그인 사용자 컨텍스트 -->
    <select id="findUserContextByEmail" resultType="com.blue.customer.allocate.dto.UserContextDto">
        SELECT
            u.user_id    AS userId,
            u.user_role  AS role,
            u.center_id  AS centerId,
            u.user_email AS email,
            u.manager_phone_access AS visible
        FROM users u
        WHERE u.user_email = #{email}
        LIMIT 1
    </select>

    <!-- 공통 필터 -->
    <sql id="LIST_FILTERS_COMMON">
        <if test="keyword != null and keyword != ''">
            <choose>
                <!-- 가시권한 N: 이름 LIKE + 앞3/앞2/뒤4 '정확일치'만 -->
                <when test='visible == "N"'>
                    AND (
                    c.customer_name LIKE CONCAT('%', #{keyword}, '%')
                    OR RIGHT(REPLACE(c.customer_phone, '-', ''), 4) = REPLACE(#{keyword}, '-', '')
                    OR LEFT(REPLACE(c.customer_phone,  '-', ''), 3) = REPLACE(#{keyword}, '-', '')
                    OR LEFT(REPLACE(c.customer_phone,  '-', ''), 2) = REPLACE(#{keyword}, '-', '')
                    )
                </when>
                <!-- 기본: 이름/전화 LIKE -->
                <otherwise>
                    AND (
                    c.customer_name   LIKE CONCAT('%', #{keyword}, '%')
                    OR c.customer_phone LIKE CONCAT('%', #{keyword}, '%')
                    )
                </otherwise>
            </choose>
        </if>
        <if test="dateFrom != null and dateFrom != ''">
            AND c.customer_created_at &gt;= #{dateFrom}
        </if>
        <if test="dateTo != null and dateTo != ''">
            AND c.customer_created_at &lt; DATE_ADD(#{dateTo}, INTERVAL 1 DAY)
        </if>
        <if test="category != null and category != ''">
            AND c.customer_category = #{category}
        </if>
    </sql>

    <sql id="ORDER_DEFAULT">
        <choose>
            <when test="sort == 'status'">
                ORDER BY FIELD(c.customer_status,'회수','없음','신규','가망','재콜','부재1','부재2','부재3','부재4','부재5','거절','자연풀','카피'),
                c.customer_created_at DESC
            </when>
            <otherwise>
                ORDER BY c.customer_created_at DESC
            </otherwise>
        </choose>
    </sql>

    <!-- HQ: 상태 '없음','회수'만, division(최초/유효) 필터 -->
    <select id="findListForHq" resultType="com.blue.customer.allocate.dto.AllocateListRowDto">
        SELECT
        c.customer_id           AS id,
        c.customer_name         AS name,

        CASE WHEN #{visible} = 'Y'
        THEN c.customer_phone
        ELSE CONCAT(SUBSTRING_INDEX(c.customer_phone,'-',1), '-****-', SUBSTRING_INDEX(c.customer_phone,'-',-1))
        END AS phone,

        IFNULL((
        SELECT GROUP_CONCAT(
        CONCAT(
        u2.user_name, '(',
        RIGHT(REGEXP_REPLACE(u2.user_phone, '[^0-9]', ''), 4),
        ')'
        )
        ORDER BY cpu.past_user_id
        SEPARATOR ', '
        )
        FROM customer_past_users cpu
        JOIN users u2 ON u2.user_id = cpu.user_id
        WHERE cpu.customer_phone = c.customer_phone
        ), '') AS paststaff,

        u.user_name             AS staff,
        c.customer_division     AS division,
        c.customer_category     AS category,
        c.customer_status       AS status,
        ctr.center_name         AS centerName,
        c.customer_source       AS source,
        c.customer_content      AS content,
        c.customer_created_at   AS createdAt
        FROM customers c
        LEFT JOIN users u   ON u.user_id = c.user_id
        LEFT JOIN centers ctr ON ctr.center_id = u.center_id
        WHERE c.customer_status IN ('없음','회수')
        <if test="division != null and division != ''">
            AND c.customer_division = #{division}
        </if>
        <include refid="LIST_FILTERS_COMMON"/>
        <include refid="ORDER_DEFAULT"/>
        LIMIT #{size} OFFSET #{offset}
    </select>

    <select id="countListForHq" resultType="int">
        SELECT COUNT(*)
        FROM customers c
        LEFT JOIN users u ON u.user_id = c.user_id
        WHERE c.customer_status IN ('없음','회수')
        <if test="division != null and division != ''">
            AND c.customer_division = #{division}
        </if>
        <include refid="LIST_FILTERS_COMMON"/>
    </select>

    <!-- MANAGER: 현재담당=나 -->
    <select id="findListForManager" resultType="com.blue.customer.allocate.dto.AllocateListRowDto">
        SELECT
        c.customer_id           AS id,
        c.customer_name         AS name,
        c.customer_phone        AS phone,

        <!-- 이력은 본사만 보이게 -->
        NULL                    AS paststaff,

        c.customer_division     AS division,
        c.customer_category     AS category,
        c.customer_status       AS status,
        (SELECT center_name FROM centers WHERE center_id = u.center_id) AS centerName,
        c.customer_source       AS source,
        c.customer_content      AS content,
        c.customer_created_at   AS createdAt
        FROM customers c
        JOIN users u ON u.user_id = c.user_id
        WHERE c.user_id = #{managerUserId}
        <include refid="LIST_FILTERS_COMMON"/>
        <include refid="ORDER_DEFAULT"/>
        LIMIT #{size} OFFSET #{offset}
    </select>

    <select id="countListForManager" resultType="int">
        SELECT COUNT(*)
        FROM customers c
        JOIN users u ON u.user_id = c.user_id
        WHERE c.user_id = #{managerUserId}
        <include refid="LIST_FILTERS_COMMON"/>
    </select>

    <!-- 검증/조회 -->
    <select id="userBelongsToCenter" resultType="int">
        SELECT COUNT(*) FROM users WHERE user_id = #{userId} AND center_id = #{centerId}
    </select>

    <select id="findCenterHeadUserId" resultType="long">
        SELECT user_id
        FROM users
        WHERE center_id = #{centerId}
        AND user_role = 'MANAGER'
        AND user_approved = 'Y'                  <!-- 승인된 센터장만 -->
        ORDER BY user_created_at ASC
        LIMIT 1
    </select>

    <select id="staffInSameCenter" resultType="int">
        SELECT COUNT(*)
        FROM users s
        JOIN users m ON m.user_id = #{managerUserId}
        WHERE s.user_id   = #{staffUserId}
        AND s.center_id = m.center_id
        AND s.user_role = 'STAFF'
        AND s.user_approved = 'Y'                <!-- 승인된 직원만 허용 -->
    </select>


    <!-- 잠금: HQ 대상 (상태: 없음/회수) -->
    <select id="lockCustomersForHq" resultType="long">
        SELECT c.customer_id
        FROM customers c
        WHERE c.customer_id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">#{id}</foreach>
        AND c.customer_status IN ('없음','회수')
        FOR UPDATE
    </select>

    <!-- 잠금: MANAGER 대상 (현재담당=센터장) -->
    <select id="lockCustomersForManager" resultType="long">
        SELECT c.customer_id
        FROM customers c
        WHERE c.customer_id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">#{id}</foreach>
        AND c.user_id = #{managerUserId}
        FOR UPDATE
    </select>

    <!-- 이력 적재: 새로 배정받는 사람(센터장/직원) -->
    <insert id="insertPastForNewOwner">
        INSERT INTO customer_past_users (customer_phone, user_id)
        SELECT c.customer_phone, #{userId}
        FROM customers c
        WHERE c.customer_id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">#{id}</foreach>
        AND NOT EXISTS (
            SELECT 1 FROM customer_past_users cpu
            WHERE cpu.customer_phone = c.customer_phone
            AND cpu.user_id = #{userId}
        )
    </insert>

    <!-- 예외: 센터장→직원 재분배 시, 센터장 이력 삭제 -->
    <delete id="deleteManagerFromPast">
        DELETE cpu
        FROM customer_past_users cpu
        JOIN customers c ON c.customer_phone = cpu.customer_phone
        WHERE cpu.user_id = #{managerUserId}
        AND c.customer_status = '신규'   <!-- 신규일 때만 센터장 이력 제거 -->
        AND c.customer_id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">#{id}</foreach>
    </delete>

    <!-- 소유자/상태 변경 -->
    <update id="updateOwner">
        UPDATE customers
        SET user_id = #{userId}
        WHERE customer_id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">#{id}</foreach>
    </update>

    <!-- 본사 분배: 상태를 '신규'로 강제 세팅 -->
    <update id="updateStatusToNew">
        UPDATE customers
        SET customer_status = '신규'
        WHERE customer_id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">#{id}</foreach>
    </update>

    <!-- 직원 검색 -->
    <select id="searchStaffForAllocate" resultType="com.blue.customer.allocate.dto.UserPickDto">
        SELECT
        u.user_id     AS userId,
        u.user_name   AS userName,
        c.center_name AS centerName
        FROM users u
        LEFT JOIN centers c ON c.center_id = u.center_id
        WHERE u.user_role = 'STAFF'
        AND u.user_approved = 'Y'                <!-- 승인된 직원만 -->
        <if test="centerId != null">
            AND u.center_id = #{centerId}
        </if>
        <if test="q != null and q != ''">
            AND (
            u.user_name LIKE CONCAT('%', #{q}, '%')
            OR REPLACE(SUBSTRING_INDEX(u.user_phone, '-', -1), '-', '') LIKE REPLACE(#{q}, '-', '')
            )
        </if>
        ORDER BY u.user_name ASC
        LIMIT 50
    </select>

    <!-- 분배용 센터 목록:
      1) 사람 0명 센터 제외
      2) 본사(1) 제외
      3) hasManager 플래그/인원수 내려줌 -->
    <select id="findCentersForAllocate" resultType="com.blue.customer.allocate.dto.CenterPickDto">
        SELECT
        c.center_id   AS centerId,
        c.center_name AS centerName,
        EXISTS(
        SELECT 1
        FROM users mu
        WHERE mu.center_id = c.center_id
        AND mu.user_role = 'MANAGER'
        AND mu.user_approved = 'Y'           <!-- 승인된 센터장만 hasManager -->
        ) AS hasManager,
        (
        SELECT COUNT(*)
        FROM users u
        WHERE u.center_id = c.center_id
        AND u.user_approved = 'Y'            <!-- 승인된 인원만 카운트 -->
        ) AS userCount
        FROM centers c
        WHERE c.center_id &lt;&gt; 1                    <!-- 본사 제외 -->
        AND EXISTS (                              <!-- 승인된 인원 1명 이상 있는 센터만 노출 -->
        SELECT 1 FROM users u
        WHERE u.center_id = c.center_id
        AND u.user_approved = 'Y'
        )
        ORDER BY c.center_name ASC
    </select>

</mapper>
