name: CI/CD Backend & Frontend

on:
  push:
    branches: [ "release/main" ]   # CICD 연결할 브랜치

jobs:
  backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build Backend
        working-directory: blue   # 백엔드 경로
        run: ./gradlew clean build -x test

#      # === Server 1 배포 ===
#      - name: Stop Tomcat on Server 1
#        uses: appleboy/ssh-action@v0.1.10
#        with:
#          host: ${{ secrets.EC2_HOST_1 }}   # 첫 번째 서버 IP
#          username: ${{ secrets.EC2_USER }}   # ec2-user
#          key: ${{ secrets.EC2_SSH_KEY }}   # EC2 접속용 Private Key 전체 내용
#          script: |
#            sudo systemctl stop tomcat || true
#            sudo rm -rf /opt/tomcat/webapps/ROOT*
#
#      - name: Copy WAR to Server 1
#        uses: appleboy/scp-action@v0.1.7
#        with:
#          host: ${{ secrets.EC2_HOST_1 }}   # 첫 번째 서버 IP
#          username: ${{ secrets.EC2_USER }}   # ec2-user
#          key: ${{ secrets.EC2_SSH_KEY }}   # EC2 접속용 Private Key 전체 내용
#          source: "blue/build/libs/*.war"
#          target: "/home/ec2-user/"
#
#      - name: Restart Tomcat on Server 1
#        uses: appleboy/ssh-action@v0.1.10
#        with:
#          host: ${{ secrets.EC2_HOST_1 }}   # 첫 번째 서버 IP
#          username: ${{ secrets.EC2_USER }}   # ec2-user
#          key: ${{ secrets.EC2_SSH_KEY }}   # EC2 접속용 Private Key 전체 내용
#          script: |
#            sudo mv /home/ec2-user/*.war /opt/tomcat/webapps/ROOT.war
#            sudo chown root:root /opt/tomcat/webapps/ROOT.war
#            sudo chmod 644 /opt/tomcat/webapps/ROOT.war
#            sudo systemctl start tomcat
#
#      # === Server 2 배포 ===
#      - name: Stop Tomcat on Server 2
#        uses: appleboy/ssh-action@v0.1.10
#        with:
#          host: ${{ secrets.EC2_HOST_2 }}   # 두 번째 서버 IP
#          username: ${{ secrets.EC2_USER }}   # ec2-user
#          key: ${{ secrets.EC2_SSH_KEY }}   # EC2 접속용 Private Key 전체 내용
#          script: |
#            sudo systemctl stop tomcat || true
#            sudo rm -rf /opt/tomcat/webapps/ROOT*
#
#      - name: Copy WAR to Server 2
#        uses: appleboy/scp-action@v0.1.7
#        with:
#          host: ${{ secrets.EC2_HOST_2 }}   # 두 번째 서버 IP
#          username: ${{ secrets.EC2_USER }}   # ec2-user
#          key: ${{ secrets.EC2_SSH_KEY }}   # EC2 접속용 Private Key 전체 내용
#          source: "blue/build/libs/*.war"
#          target: "/home/ec2-user/"
#
#      - name: Restart Tomcat on Server 2
#        uses: appleboy/ssh-action@v0.1.10
#        with:
#          host: ${{ secrets.EC2_HOST_2 }}   # 두 번째 서버 IP
#          username: ${{ secrets.EC2_USER }}   # ec2-user
#          key: ${{ secrets.EC2_SSH_KEY }}   # EC2 접속용 Private Key 전체 내용
#          script: |
#            sudo mv /home/ec2-user/*.war /opt/tomcat/webapps/ROOT.war
#            sudo chown root:root /opt/tomcat/webapps/ROOT.war
#            sudo chmod 644 /opt/tomcat/webapps/ROOT.war
#            sudo systemctl start tomcat

  frontend:
    runs-on: ubuntu-latest
    needs: backend   # 백엔드 실행 후 실행하시오
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install & Build Frontend
        working-directory: frontend   # 프론트 경로
        run: |
          npm install
          npm run build

#      # === S3+CloudFront 배포 ===
#      - name: Configure AWS Credentials
#        uses: aws-actions/configure-aws-credentials@v2
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ap-northeast-2  # 서울
#
#      - name: Deploy to S3
#        run: aws s3 sync frontend/dist s3://${{ secrets.S3_BUCKET_NAME }} --delete
#
#      - name: Invalidate CloudFront Cache
#        run: |
#          aws cloudfront create-invalidation \
#            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
#            --paths "/*"
